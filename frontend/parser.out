Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations
Rule 2     declarations -> declaration
Rule 3     declarations -> declarations declaration
Rule 4     declaration -> globaldec
Rule 5     declaration -> globaldef
Rule 6     declaration -> fundec
Rule 7     declaration -> fundef
Rule 8     globaldec -> EXTERN type ID SEMICOL
Rule 9     globaldef -> STATIC type ID ASSIGN expr SEMICOL
Rule 10    globaldef -> type ID ASSIGN expr SEMICOL
Rule 11    fundec -> EXTERN funheader SEMICOL
Rule 12    fundec -> EXTERN funheader_varargs SEMICOL
Rule 13    fundef -> funheader LBRACE RBRACE
Rule 14    fundef -> funheader LBRACE statements RBRACE
Rule 15    fundef -> STATIC funheader LBRACE RBRACE
Rule 16    fundef -> STATIC funheader LBRACE statements RBRACE
Rule 17    funheader -> type ID LPAREN RPAREN
Rule 18    funheader -> type ID LPAREN params RPAREN
Rule 19    funheader_varargs -> type ID LPAREN DOTS RPAREN
Rule 20    funheader_varargs -> type ID LPAREN params COMMA DOTS RPAREN
Rule 21    params -> type ID
Rule 22    params -> params COMMA type ID
Rule 23    statements -> statement
Rule 24    statements -> statements statement
Rule 25    statement -> LBRACE RBRACE
Rule 26    statement -> LBRACE statements RBRACE
Rule 27    statement -> type ID ASSIGN expr SEMICOL
Rule 28    statement -> type LBRACKET expr RBRACKET ID SEMICOL
Rule 29    statement -> ID ASSIGN expr SEMICOL
Rule 30    statement -> index ASSIGN expr SEMICOL
Rule 31    statement -> ID MODIFY expr SEMICOL
Rule 32    statement -> index MODIFY expr SEMICOL
Rule 33    statement -> expr SEMICOL
Rule 34    statement -> IF LPAREN expr RPAREN statement
Rule 35    statement -> IF LPAREN expr RPAREN statement ELSE statement
Rule 36    statement -> WHILE LPAREN expr RPAREN statement
Rule 37    statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL
Rule 38    statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
Rule 39    statement -> BREAK SEMICOL
Rule 40    statement -> CONTINUE SEMICOL
Rule 41    statement -> RETURN SEMICOL
Rule 42    statement -> RETURN expr SEMICOL
Rule 43    expr -> ID
Rule 44    index -> expr LBRACKET expr RBRACKET
Rule 45    expr -> index
Rule 46    expr -> LPAREN expr RPAREN
Rule 47    expr -> expr PLUS expr
Rule 48    expr -> expr MINUS expr
Rule 49    expr -> expr TIMES expr
Rule 50    expr -> expr DIVIDE expr
Rule 51    expr -> expr MODULO expr
Rule 52    expr -> expr EQ expr
Rule 53    expr -> expr NE expr
Rule 54    expr -> expr LT expr
Rule 55    expr -> expr GT expr
Rule 56    expr -> expr LE expr
Rule 57    expr -> expr GE expr
Rule 58    expr -> expr AND expr
Rule 59    expr -> expr OR expr
Rule 60    expr -> NOT expr
Rule 61    expr -> MINUS expr
Rule 62    expr -> INV expr
Rule 63    expr -> funcall
Rule 64    funcall -> ID LPAREN RPAREN
Rule 65    funcall -> ID LPAREN exprs RPAREN
Rule 66    exprs -> expr
Rule 67    exprs -> exprs COMMA expr
Rule 68    expr -> BOOLCONST
Rule 69    expr -> CHARCONST
Rule 70    expr -> INTCONST
Rule 71    expr -> FLOATCONST
Rule 72    expr -> HEXCONST
Rule 73    expr -> STRINGCONST
Rule 74    type -> TYPE
Rule 75    type -> type BRACKETS

Terminals, with rules where they appear

AND                  : 58
ASSIGN               : 9 10 27 29 30 38
BOOLCONST            : 68
BRACKETS             : 75
BREAK                : 39
CHARCONST            : 69
COMMA                : 20 22 67
CONTINUE             : 40
DIVIDE               : 50
DO                   : 37
DOTS                 : 19 20
ELSE                 : 35
EQ                   : 52
EXTERN               : 8 11 12
FLOATCONST           : 71
FOR                  : 38
GE                   : 57
GT                   : 55
HEXCONST             : 72
ID                   : 8 9 10 17 18 19 20 21 22 27 28 29 31 38 43 64 65
IF                   : 34 35
INTCONST             : 70
INV                  : 62
LBRACE               : 13 14 15 16 25 26
LBRACKET             : 28 44
LE                   : 56
LPAREN               : 17 18 19 20 34 35 36 37 38 46 64 65
LT                   : 54
MINUS                : 48 61
MODIFY               : 31 32
MODULO               : 51
NE                   : 53
NOT                  : 60
OR                   : 59
PLUS                 : 47
RBRACE               : 13 14 15 16 25 26
RBRACKET             : 28 44
RETURN               : 41 42
RPAREN               : 17 18 19 20 34 35 36 37 38 46 64 65
SEMICOL              : 8 9 10 11 12 27 28 29 30 31 32 33 37 39 40 41 42
STATIC               : 9 15 16
STRINGCONST          : 73
TIMES                : 49
TO                   : 38
TYPE                 : 74
WHILE                : 36 37
error                : 

Nonterminals, with rules where they appear

declaration          : 2 3
declarations         : 1 3
expr                 : 9 10 27 28 29 30 31 32 33 34 35 36 37 38 38 42 44 44 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 61 62 66 67
exprs                : 65 67
funcall              : 63
fundec               : 6
fundef               : 7
funheader            : 11 13 14 15 16
funheader_varargs    : 12
globaldec            : 4
globaldef            : 5
index                : 30 32 45
params               : 18 20 22
program              : 0
statement            : 23 24 34 35 35 36 37 38
statements           : 14 16 24 26
type                 : 8 9 10 17 18 19 20 21 22 27 28 38 75

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations
    (2) declarations -> . declaration
    (3) declarations -> . declarations declaration
    (4) declaration -> . globaldec
    (5) declaration -> . globaldef
    (6) declaration -> . fundec
    (7) declaration -> . fundef
    (8) globaldec -> . EXTERN type ID SEMICOL
    (9) globaldef -> . STATIC type ID ASSIGN expr SEMICOL
    (10) globaldef -> . type ID ASSIGN expr SEMICOL
    (11) fundec -> . EXTERN funheader SEMICOL
    (12) fundec -> . EXTERN funheader_varargs SEMICOL
    (13) fundef -> . funheader LBRACE RBRACE
    (14) fundef -> . funheader LBRACE statements RBRACE
    (15) fundef -> . STATIC funheader LBRACE RBRACE
    (16) fundef -> . STATIC funheader LBRACE statements RBRACE
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (17) funheader -> . type ID LPAREN RPAREN
    (18) funheader -> . type ID LPAREN params RPAREN

    EXTERN          shift and go to state 6
    STATIC          shift and go to state 12
    TYPE            shift and go to state 4

    globaldec                      shift and go to state 7
    fundef                         shift and go to state 1
    funheader                      shift and go to state 2
    declaration                    shift and go to state 10
    declarations                   shift and go to state 8
    fundec                         shift and go to state 9
    program                        shift and go to state 3
    type                           shift and go to state 5
    globaldef                      shift and go to state 11

state 1

    (7) declaration -> fundef .

    EXTERN          reduce using rule 7 (declaration -> fundef .)
    STATIC          reduce using rule 7 (declaration -> fundef .)
    TYPE            reduce using rule 7 (declaration -> fundef .)
    $end            reduce using rule 7 (declaration -> fundef .)


state 2

    (13) fundef -> funheader . LBRACE RBRACE
    (14) fundef -> funheader . LBRACE statements RBRACE

    LBRACE          shift and go to state 13


state 3

    (0) S' -> program .



state 4

    (74) type -> TYPE .

    ID              reduce using rule 74 (type -> TYPE .)
    BRACKETS        reduce using rule 74 (type -> TYPE .)
    LBRACKET        reduce using rule 74 (type -> TYPE .)


state 5

    (10) globaldef -> type . ID ASSIGN expr SEMICOL
    (75) type -> type . BRACKETS
    (17) funheader -> type . ID LPAREN RPAREN
    (18) funheader -> type . ID LPAREN params RPAREN

    ID              shift and go to state 15
    BRACKETS        shift and go to state 14


state 6

    (8) globaldec -> EXTERN . type ID SEMICOL
    (11) fundec -> EXTERN . funheader SEMICOL
    (12) fundec -> EXTERN . funheader_varargs SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (17) funheader -> . type ID LPAREN RPAREN
    (18) funheader -> . type ID LPAREN params RPAREN
    (19) funheader_varargs -> . type ID LPAREN DOTS RPAREN
    (20) funheader_varargs -> . type ID LPAREN params COMMA DOTS RPAREN

    TYPE            shift and go to state 4

    funheader                      shift and go to state 16
    type                           shift and go to state 17
    funheader_varargs              shift and go to state 18

state 7

    (4) declaration -> globaldec .

    EXTERN          reduce using rule 4 (declaration -> globaldec .)
    STATIC          reduce using rule 4 (declaration -> globaldec .)
    TYPE            reduce using rule 4 (declaration -> globaldec .)
    $end            reduce using rule 4 (declaration -> globaldec .)


state 8

    (1) program -> declarations .
    (3) declarations -> declarations . declaration
    (4) declaration -> . globaldec
    (5) declaration -> . globaldef
    (6) declaration -> . fundec
    (7) declaration -> . fundef
    (8) globaldec -> . EXTERN type ID SEMICOL
    (9) globaldef -> . STATIC type ID ASSIGN expr SEMICOL
    (10) globaldef -> . type ID ASSIGN expr SEMICOL
    (11) fundec -> . EXTERN funheader SEMICOL
    (12) fundec -> . EXTERN funheader_varargs SEMICOL
    (13) fundef -> . funheader LBRACE RBRACE
    (14) fundef -> . funheader LBRACE statements RBRACE
    (15) fundef -> . STATIC funheader LBRACE RBRACE
    (16) fundef -> . STATIC funheader LBRACE statements RBRACE
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (17) funheader -> . type ID LPAREN RPAREN
    (18) funheader -> . type ID LPAREN params RPAREN

    $end            reduce using rule 1 (program -> declarations .)
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 12
    TYPE            shift and go to state 4

    globaldec                      shift and go to state 7
    fundef                         shift and go to state 1
    funheader                      shift and go to state 2
    fundec                         shift and go to state 9
    declaration                    shift and go to state 19
    type                           shift and go to state 5
    globaldef                      shift and go to state 11

state 9

    (6) declaration -> fundec .

    EXTERN          reduce using rule 6 (declaration -> fundec .)
    STATIC          reduce using rule 6 (declaration -> fundec .)
    TYPE            reduce using rule 6 (declaration -> fundec .)
    $end            reduce using rule 6 (declaration -> fundec .)


state 10

    (2) declarations -> declaration .

    EXTERN          reduce using rule 2 (declarations -> declaration .)
    STATIC          reduce using rule 2 (declarations -> declaration .)
    TYPE            reduce using rule 2 (declarations -> declaration .)
    $end            reduce using rule 2 (declarations -> declaration .)


state 11

    (5) declaration -> globaldef .

    EXTERN          reduce using rule 5 (declaration -> globaldef .)
    STATIC          reduce using rule 5 (declaration -> globaldef .)
    TYPE            reduce using rule 5 (declaration -> globaldef .)
    $end            reduce using rule 5 (declaration -> globaldef .)


state 12

    (9) globaldef -> STATIC . type ID ASSIGN expr SEMICOL
    (15) fundef -> STATIC . funheader LBRACE RBRACE
    (16) fundef -> STATIC . funheader LBRACE statements RBRACE
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (17) funheader -> . type ID LPAREN RPAREN
    (18) funheader -> . type ID LPAREN params RPAREN

    TYPE            shift and go to state 4

    funheader                      shift and go to state 20
    type                           shift and go to state 21

state 13

    (13) fundef -> funheader LBRACE . RBRACE
    (14) fundef -> funheader LBRACE . statements RBRACE
    (23) statements -> . statement
    (24) statements -> . statements statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RBRACE          shift and go to state 44
    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    statements                     shift and go to state 26
    statement                      shift and go to state 25
    funcall                        shift and go to state 24
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 14

    (75) type -> type BRACKETS .

    ID              reduce using rule 75 (type -> type BRACKETS .)
    BRACKETS        reduce using rule 75 (type -> type BRACKETS .)
    LBRACKET        reduce using rule 75 (type -> type BRACKETS .)


state 15

    (10) globaldef -> type ID . ASSIGN expr SEMICOL
    (17) funheader -> type ID . LPAREN RPAREN
    (18) funheader -> type ID . LPAREN params RPAREN

    ASSIGN          shift and go to state 49
    LPAREN          shift and go to state 48


state 16

    (11) fundec -> EXTERN funheader . SEMICOL

    SEMICOL         shift and go to state 50


state 17

    (8) globaldec -> EXTERN type . ID SEMICOL
    (75) type -> type . BRACKETS
    (17) funheader -> type . ID LPAREN RPAREN
    (18) funheader -> type . ID LPAREN params RPAREN
    (19) funheader_varargs -> type . ID LPAREN DOTS RPAREN
    (20) funheader_varargs -> type . ID LPAREN params COMMA DOTS RPAREN

    ID              shift and go to state 51
    BRACKETS        shift and go to state 14


state 18

    (12) fundec -> EXTERN funheader_varargs . SEMICOL

    SEMICOL         shift and go to state 52


state 19

    (3) declarations -> declarations declaration .

    EXTERN          reduce using rule 3 (declarations -> declarations declaration .)
    STATIC          reduce using rule 3 (declarations -> declarations declaration .)
    TYPE            reduce using rule 3 (declarations -> declarations declaration .)
    $end            reduce using rule 3 (declarations -> declarations declaration .)


state 20

    (15) fundef -> STATIC funheader . LBRACE RBRACE
    (16) fundef -> STATIC funheader . LBRACE statements RBRACE

    LBRACE          shift and go to state 53


state 21

    (9) globaldef -> STATIC type . ID ASSIGN expr SEMICOL
    (75) type -> type . BRACKETS
    (17) funheader -> type . ID LPAREN RPAREN
    (18) funheader -> type . ID LPAREN params RPAREN

    ID              shift and go to state 54
    BRACKETS        shift and go to state 14


state 22

    (68) expr -> BOOLCONST .

    SEMICOL         reduce using rule 68 (expr -> BOOLCONST .)
    PLUS            reduce using rule 68 (expr -> BOOLCONST .)
    MINUS           reduce using rule 68 (expr -> BOOLCONST .)
    TIMES           reduce using rule 68 (expr -> BOOLCONST .)
    DIVIDE          reduce using rule 68 (expr -> BOOLCONST .)
    MODULO          reduce using rule 68 (expr -> BOOLCONST .)
    EQ              reduce using rule 68 (expr -> BOOLCONST .)
    NE              reduce using rule 68 (expr -> BOOLCONST .)
    LT              reduce using rule 68 (expr -> BOOLCONST .)
    GT              reduce using rule 68 (expr -> BOOLCONST .)
    LE              reduce using rule 68 (expr -> BOOLCONST .)
    GE              reduce using rule 68 (expr -> BOOLCONST .)
    AND             reduce using rule 68 (expr -> BOOLCONST .)
    OR              reduce using rule 68 (expr -> BOOLCONST .)
    LBRACKET        reduce using rule 68 (expr -> BOOLCONST .)
    RPAREN          reduce using rule 68 (expr -> BOOLCONST .)
    RBRACKET        reduce using rule 68 (expr -> BOOLCONST .)
    COMMA           reduce using rule 68 (expr -> BOOLCONST .)
    TO              reduce using rule 68 (expr -> BOOLCONST .)


state 23

    (60) expr -> NOT . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 55

state 24

    (63) expr -> funcall .

    SEMICOL         reduce using rule 63 (expr -> funcall .)
    PLUS            reduce using rule 63 (expr -> funcall .)
    MINUS           reduce using rule 63 (expr -> funcall .)
    TIMES           reduce using rule 63 (expr -> funcall .)
    DIVIDE          reduce using rule 63 (expr -> funcall .)
    MODULO          reduce using rule 63 (expr -> funcall .)
    EQ              reduce using rule 63 (expr -> funcall .)
    NE              reduce using rule 63 (expr -> funcall .)
    LT              reduce using rule 63 (expr -> funcall .)
    GT              reduce using rule 63 (expr -> funcall .)
    LE              reduce using rule 63 (expr -> funcall .)
    GE              reduce using rule 63 (expr -> funcall .)
    AND             reduce using rule 63 (expr -> funcall .)
    OR              reduce using rule 63 (expr -> funcall .)
    LBRACKET        reduce using rule 63 (expr -> funcall .)
    RPAREN          reduce using rule 63 (expr -> funcall .)
    RBRACKET        reduce using rule 63 (expr -> funcall .)
    COMMA           reduce using rule 63 (expr -> funcall .)
    TO              reduce using rule 63 (expr -> funcall .)


state 25

    (23) statements -> statement .

    RBRACE          reduce using rule 23 (statements -> statement .)
    LBRACE          reduce using rule 23 (statements -> statement .)
    ID              reduce using rule 23 (statements -> statement .)
    IF              reduce using rule 23 (statements -> statement .)
    WHILE           reduce using rule 23 (statements -> statement .)
    DO              reduce using rule 23 (statements -> statement .)
    FOR             reduce using rule 23 (statements -> statement .)
    BREAK           reduce using rule 23 (statements -> statement .)
    CONTINUE        reduce using rule 23 (statements -> statement .)
    RETURN          reduce using rule 23 (statements -> statement .)
    TYPE            reduce using rule 23 (statements -> statement .)
    LPAREN          reduce using rule 23 (statements -> statement .)
    NOT             reduce using rule 23 (statements -> statement .)
    MINUS           reduce using rule 23 (statements -> statement .)
    INV             reduce using rule 23 (statements -> statement .)
    BOOLCONST       reduce using rule 23 (statements -> statement .)
    CHARCONST       reduce using rule 23 (statements -> statement .)
    INTCONST        reduce using rule 23 (statements -> statement .)
    FLOATCONST      reduce using rule 23 (statements -> statement .)
    HEXCONST        reduce using rule 23 (statements -> statement .)
    STRINGCONST     reduce using rule 23 (statements -> statement .)


state 26

    (14) fundef -> funheader LBRACE statements . RBRACE
    (24) statements -> statements . statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RBRACE          shift and go to state 59
    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    statement                      shift and go to state 58
    funcall                        shift and go to state 24
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 27

    (27) statement -> type . ID ASSIGN expr SEMICOL
    (28) statement -> type . LBRACKET expr RBRACKET ID SEMICOL
    (75) type -> type . BRACKETS

    ID              shift and go to state 61
    LBRACKET        shift and go to state 60
    BRACKETS        shift and go to state 14


state 28

    (70) expr -> INTCONST .

    SEMICOL         reduce using rule 70 (expr -> INTCONST .)
    PLUS            reduce using rule 70 (expr -> INTCONST .)
    MINUS           reduce using rule 70 (expr -> INTCONST .)
    TIMES           reduce using rule 70 (expr -> INTCONST .)
    DIVIDE          reduce using rule 70 (expr -> INTCONST .)
    MODULO          reduce using rule 70 (expr -> INTCONST .)
    EQ              reduce using rule 70 (expr -> INTCONST .)
    NE              reduce using rule 70 (expr -> INTCONST .)
    LT              reduce using rule 70 (expr -> INTCONST .)
    GT              reduce using rule 70 (expr -> INTCONST .)
    LE              reduce using rule 70 (expr -> INTCONST .)
    GE              reduce using rule 70 (expr -> INTCONST .)
    AND             reduce using rule 70 (expr -> INTCONST .)
    OR              reduce using rule 70 (expr -> INTCONST .)
    LBRACKET        reduce using rule 70 (expr -> INTCONST .)
    RPAREN          reduce using rule 70 (expr -> INTCONST .)
    RBRACKET        reduce using rule 70 (expr -> INTCONST .)
    COMMA           reduce using rule 70 (expr -> INTCONST .)
    TO              reduce using rule 70 (expr -> INTCONST .)


state 29

    (33) statement -> expr . SEMICOL
    (44) index -> expr . LBRACKET expr RBRACKET
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr

    SEMICOL         shift and go to state 69
    LBRACKET        shift and go to state 70
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71


state 30

    (41) statement -> RETURN . SEMICOL
    (42) statement -> RETURN . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    SEMICOL         shift and go to state 77
    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 78

state 31

    (25) statement -> LBRACE . RBRACE
    (26) statement -> LBRACE . statements RBRACE
    (23) statements -> . statement
    (24) statements -> . statements statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RBRACE          shift and go to state 80
    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 25
    statements                     shift and go to state 79
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 32

    (37) statement -> DO . statement WHILE LPAREN expr RPAREN SEMICOL
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 81
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 33

    (29) statement -> ID . ASSIGN expr SEMICOL
    (31) statement -> ID . MODIFY expr SEMICOL
    (43) expr -> ID .
    (64) funcall -> ID . LPAREN RPAREN
    (65) funcall -> ID . LPAREN exprs RPAREN

    ASSIGN          shift and go to state 84
    MODIFY          shift and go to state 83
    SEMICOL         reduce using rule 43 (expr -> ID .)
    LBRACKET        reduce using rule 43 (expr -> ID .)
    PLUS            reduce using rule 43 (expr -> ID .)
    MINUS           reduce using rule 43 (expr -> ID .)
    TIMES           reduce using rule 43 (expr -> ID .)
    DIVIDE          reduce using rule 43 (expr -> ID .)
    MODULO          reduce using rule 43 (expr -> ID .)
    EQ              reduce using rule 43 (expr -> ID .)
    NE              reduce using rule 43 (expr -> ID .)
    LT              reduce using rule 43 (expr -> ID .)
    GT              reduce using rule 43 (expr -> ID .)
    LE              reduce using rule 43 (expr -> ID .)
    GE              reduce using rule 43 (expr -> ID .)
    AND             reduce using rule 43 (expr -> ID .)
    OR              reduce using rule 43 (expr -> ID .)
    LPAREN          shift and go to state 82


state 34

    (30) statement -> index . ASSIGN expr SEMICOL
    (32) statement -> index . MODIFY expr SEMICOL
    (45) expr -> index .

    ASSIGN          shift and go to state 86
    MODIFY          shift and go to state 85
    SEMICOL         reduce using rule 45 (expr -> index .)
    LBRACKET        reduce using rule 45 (expr -> index .)
    PLUS            reduce using rule 45 (expr -> index .)
    MINUS           reduce using rule 45 (expr -> index .)
    TIMES           reduce using rule 45 (expr -> index .)
    DIVIDE          reduce using rule 45 (expr -> index .)
    MODULO          reduce using rule 45 (expr -> index .)
    EQ              reduce using rule 45 (expr -> index .)
    NE              reduce using rule 45 (expr -> index .)
    LT              reduce using rule 45 (expr -> index .)
    GT              reduce using rule 45 (expr -> index .)
    LE              reduce using rule 45 (expr -> index .)
    GE              reduce using rule 45 (expr -> index .)
    AND             reduce using rule 45 (expr -> index .)
    OR              reduce using rule 45 (expr -> index .)


state 35

    (71) expr -> FLOATCONST .

    SEMICOL         reduce using rule 71 (expr -> FLOATCONST .)
    PLUS            reduce using rule 71 (expr -> FLOATCONST .)
    MINUS           reduce using rule 71 (expr -> FLOATCONST .)
    TIMES           reduce using rule 71 (expr -> FLOATCONST .)
    DIVIDE          reduce using rule 71 (expr -> FLOATCONST .)
    MODULO          reduce using rule 71 (expr -> FLOATCONST .)
    EQ              reduce using rule 71 (expr -> FLOATCONST .)
    NE              reduce using rule 71 (expr -> FLOATCONST .)
    LT              reduce using rule 71 (expr -> FLOATCONST .)
    GT              reduce using rule 71 (expr -> FLOATCONST .)
    LE              reduce using rule 71 (expr -> FLOATCONST .)
    GE              reduce using rule 71 (expr -> FLOATCONST .)
    AND             reduce using rule 71 (expr -> FLOATCONST .)
    OR              reduce using rule 71 (expr -> FLOATCONST .)
    LBRACKET        reduce using rule 71 (expr -> FLOATCONST .)
    RPAREN          reduce using rule 71 (expr -> FLOATCONST .)
    RBRACKET        reduce using rule 71 (expr -> FLOATCONST .)
    COMMA           reduce using rule 71 (expr -> FLOATCONST .)
    TO              reduce using rule 71 (expr -> FLOATCONST .)


state 36

    (46) expr -> LPAREN . expr RPAREN
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 87

state 37

    (61) expr -> MINUS . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 88

state 38

    (69) expr -> CHARCONST .

    SEMICOL         reduce using rule 69 (expr -> CHARCONST .)
    PLUS            reduce using rule 69 (expr -> CHARCONST .)
    MINUS           reduce using rule 69 (expr -> CHARCONST .)
    TIMES           reduce using rule 69 (expr -> CHARCONST .)
    DIVIDE          reduce using rule 69 (expr -> CHARCONST .)
    MODULO          reduce using rule 69 (expr -> CHARCONST .)
    EQ              reduce using rule 69 (expr -> CHARCONST .)
    NE              reduce using rule 69 (expr -> CHARCONST .)
    LT              reduce using rule 69 (expr -> CHARCONST .)
    GT              reduce using rule 69 (expr -> CHARCONST .)
    LE              reduce using rule 69 (expr -> CHARCONST .)
    GE              reduce using rule 69 (expr -> CHARCONST .)
    AND             reduce using rule 69 (expr -> CHARCONST .)
    OR              reduce using rule 69 (expr -> CHARCONST .)
    LBRACKET        reduce using rule 69 (expr -> CHARCONST .)
    RPAREN          reduce using rule 69 (expr -> CHARCONST .)
    RBRACKET        reduce using rule 69 (expr -> CHARCONST .)
    COMMA           reduce using rule 69 (expr -> CHARCONST .)
    TO              reduce using rule 69 (expr -> CHARCONST .)


state 39

    (40) statement -> CONTINUE . SEMICOL

    SEMICOL         shift and go to state 89


state 40

    (72) expr -> HEXCONST .

    SEMICOL         reduce using rule 72 (expr -> HEXCONST .)
    PLUS            reduce using rule 72 (expr -> HEXCONST .)
    MINUS           reduce using rule 72 (expr -> HEXCONST .)
    TIMES           reduce using rule 72 (expr -> HEXCONST .)
    DIVIDE          reduce using rule 72 (expr -> HEXCONST .)
    MODULO          reduce using rule 72 (expr -> HEXCONST .)
    EQ              reduce using rule 72 (expr -> HEXCONST .)
    NE              reduce using rule 72 (expr -> HEXCONST .)
    LT              reduce using rule 72 (expr -> HEXCONST .)
    GT              reduce using rule 72 (expr -> HEXCONST .)
    LE              reduce using rule 72 (expr -> HEXCONST .)
    GE              reduce using rule 72 (expr -> HEXCONST .)
    AND             reduce using rule 72 (expr -> HEXCONST .)
    OR              reduce using rule 72 (expr -> HEXCONST .)
    LBRACKET        reduce using rule 72 (expr -> HEXCONST .)
    RPAREN          reduce using rule 72 (expr -> HEXCONST .)
    RBRACKET        reduce using rule 72 (expr -> HEXCONST .)
    COMMA           reduce using rule 72 (expr -> HEXCONST .)
    TO              reduce using rule 72 (expr -> HEXCONST .)


state 41

    (39) statement -> BREAK . SEMICOL

    SEMICOL         shift and go to state 90


state 42

    (36) statement -> WHILE . LPAREN expr RPAREN statement

    LPAREN          shift and go to state 91


state 43

    (62) expr -> INV . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 92

state 44

    (13) fundef -> funheader LBRACE RBRACE .

    EXTERN          reduce using rule 13 (fundef -> funheader LBRACE RBRACE .)
    STATIC          reduce using rule 13 (fundef -> funheader LBRACE RBRACE .)
    TYPE            reduce using rule 13 (fundef -> funheader LBRACE RBRACE .)
    $end            reduce using rule 13 (fundef -> funheader LBRACE RBRACE .)


state 45

    (73) expr -> STRINGCONST .

    SEMICOL         reduce using rule 73 (expr -> STRINGCONST .)
    PLUS            reduce using rule 73 (expr -> STRINGCONST .)
    MINUS           reduce using rule 73 (expr -> STRINGCONST .)
    TIMES           reduce using rule 73 (expr -> STRINGCONST .)
    DIVIDE          reduce using rule 73 (expr -> STRINGCONST .)
    MODULO          reduce using rule 73 (expr -> STRINGCONST .)
    EQ              reduce using rule 73 (expr -> STRINGCONST .)
    NE              reduce using rule 73 (expr -> STRINGCONST .)
    LT              reduce using rule 73 (expr -> STRINGCONST .)
    GT              reduce using rule 73 (expr -> STRINGCONST .)
    LE              reduce using rule 73 (expr -> STRINGCONST .)
    GE              reduce using rule 73 (expr -> STRINGCONST .)
    AND             reduce using rule 73 (expr -> STRINGCONST .)
    OR              reduce using rule 73 (expr -> STRINGCONST .)
    LBRACKET        reduce using rule 73 (expr -> STRINGCONST .)
    RPAREN          reduce using rule 73 (expr -> STRINGCONST .)
    RBRACKET        reduce using rule 73 (expr -> STRINGCONST .)
    COMMA           reduce using rule 73 (expr -> STRINGCONST .)
    TO              reduce using rule 73 (expr -> STRINGCONST .)


state 46

    (34) statement -> IF . LPAREN expr RPAREN statement
    (35) statement -> IF . LPAREN expr RPAREN statement ELSE statement

    LPAREN          shift and go to state 93


state 47

    (38) statement -> FOR . LPAREN type ID ASSIGN expr TO expr RPAREN statement

    LPAREN          shift and go to state 94


state 48

    (17) funheader -> type ID LPAREN . RPAREN
    (18) funheader -> type ID LPAREN . params RPAREN
    (21) params -> . type ID
    (22) params -> . params COMMA type ID
    (74) type -> . TYPE
    (75) type -> . type BRACKETS

    RPAREN          shift and go to state 95
    TYPE            shift and go to state 4

    type                           shift and go to state 96
    params                         shift and go to state 97

state 49

    (10) globaldef -> type ID ASSIGN . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    index                          shift and go to state 57
    expr                           shift and go to state 98
    funcall                        shift and go to state 24

state 50

    (11) fundec -> EXTERN funheader SEMICOL .

    EXTERN          reduce using rule 11 (fundec -> EXTERN funheader SEMICOL .)
    STATIC          reduce using rule 11 (fundec -> EXTERN funheader SEMICOL .)
    TYPE            reduce using rule 11 (fundec -> EXTERN funheader SEMICOL .)
    $end            reduce using rule 11 (fundec -> EXTERN funheader SEMICOL .)


state 51

    (8) globaldec -> EXTERN type ID . SEMICOL
    (17) funheader -> type ID . LPAREN RPAREN
    (18) funheader -> type ID . LPAREN params RPAREN
    (19) funheader_varargs -> type ID . LPAREN DOTS RPAREN
    (20) funheader_varargs -> type ID . LPAREN params COMMA DOTS RPAREN

    SEMICOL         shift and go to state 99
    LPAREN          shift and go to state 100


state 52

    (12) fundec -> EXTERN funheader_varargs SEMICOL .

    EXTERN          reduce using rule 12 (fundec -> EXTERN funheader_varargs SEMICOL .)
    STATIC          reduce using rule 12 (fundec -> EXTERN funheader_varargs SEMICOL .)
    TYPE            reduce using rule 12 (fundec -> EXTERN funheader_varargs SEMICOL .)
    $end            reduce using rule 12 (fundec -> EXTERN funheader_varargs SEMICOL .)


state 53

    (15) fundef -> STATIC funheader LBRACE . RBRACE
    (16) fundef -> STATIC funheader LBRACE . statements RBRACE
    (23) statements -> . statement
    (24) statements -> . statements statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RBRACE          shift and go to state 102
    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    statements                     shift and go to state 101
    statement                      shift and go to state 25
    funcall                        shift and go to state 24
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 54

    (9) globaldef -> STATIC type ID . ASSIGN expr SEMICOL
    (17) funheader -> type ID . LPAREN RPAREN
    (18) funheader -> type ID . LPAREN params RPAREN

    ASSIGN          shift and go to state 103
    LPAREN          shift and go to state 48


state 55

    (60) expr -> NOT expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 60 (expr -> NOT expr .)
    PLUS            reduce using rule 60 (expr -> NOT expr .)
    MINUS           reduce using rule 60 (expr -> NOT expr .)
    TIMES           reduce using rule 60 (expr -> NOT expr .)
    DIVIDE          reduce using rule 60 (expr -> NOT expr .)
    MODULO          reduce using rule 60 (expr -> NOT expr .)
    EQ              reduce using rule 60 (expr -> NOT expr .)
    NE              reduce using rule 60 (expr -> NOT expr .)
    LT              reduce using rule 60 (expr -> NOT expr .)
    GT              reduce using rule 60 (expr -> NOT expr .)
    LE              reduce using rule 60 (expr -> NOT expr .)
    GE              reduce using rule 60 (expr -> NOT expr .)
    AND             reduce using rule 60 (expr -> NOT expr .)
    OR              reduce using rule 60 (expr -> NOT expr .)
    RPAREN          reduce using rule 60 (expr -> NOT expr .)
    RBRACKET        reduce using rule 60 (expr -> NOT expr .)
    COMMA           reduce using rule 60 (expr -> NOT expr .)
    TO              reduce using rule 60 (expr -> NOT expr .)
    LBRACKET        shift and go to state 70

  ! LBRACKET        [ reduce using rule 60 (expr -> NOT expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MODULO          [ shift and go to state 63 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 56

    (43) expr -> ID .
    (64) funcall -> ID . LPAREN RPAREN
    (65) funcall -> ID . LPAREN exprs RPAREN

    SEMICOL         reduce using rule 43 (expr -> ID .)
    PLUS            reduce using rule 43 (expr -> ID .)
    MINUS           reduce using rule 43 (expr -> ID .)
    TIMES           reduce using rule 43 (expr -> ID .)
    DIVIDE          reduce using rule 43 (expr -> ID .)
    MODULO          reduce using rule 43 (expr -> ID .)
    EQ              reduce using rule 43 (expr -> ID .)
    NE              reduce using rule 43 (expr -> ID .)
    LT              reduce using rule 43 (expr -> ID .)
    GT              reduce using rule 43 (expr -> ID .)
    LE              reduce using rule 43 (expr -> ID .)
    GE              reduce using rule 43 (expr -> ID .)
    AND             reduce using rule 43 (expr -> ID .)
    OR              reduce using rule 43 (expr -> ID .)
    LBRACKET        reduce using rule 43 (expr -> ID .)
    RPAREN          reduce using rule 43 (expr -> ID .)
    RBRACKET        reduce using rule 43 (expr -> ID .)
    COMMA           reduce using rule 43 (expr -> ID .)
    TO              reduce using rule 43 (expr -> ID .)
    LPAREN          shift and go to state 82


state 57

    (45) expr -> index .

    SEMICOL         reduce using rule 45 (expr -> index .)
    PLUS            reduce using rule 45 (expr -> index .)
    MINUS           reduce using rule 45 (expr -> index .)
    TIMES           reduce using rule 45 (expr -> index .)
    DIVIDE          reduce using rule 45 (expr -> index .)
    MODULO          reduce using rule 45 (expr -> index .)
    EQ              reduce using rule 45 (expr -> index .)
    NE              reduce using rule 45 (expr -> index .)
    LT              reduce using rule 45 (expr -> index .)
    GT              reduce using rule 45 (expr -> index .)
    LE              reduce using rule 45 (expr -> index .)
    GE              reduce using rule 45 (expr -> index .)
    AND             reduce using rule 45 (expr -> index .)
    OR              reduce using rule 45 (expr -> index .)
    LBRACKET        reduce using rule 45 (expr -> index .)
    RPAREN          reduce using rule 45 (expr -> index .)
    RBRACKET        reduce using rule 45 (expr -> index .)
    COMMA           reduce using rule 45 (expr -> index .)
    TO              reduce using rule 45 (expr -> index .)


state 58

    (24) statements -> statements statement .

    RBRACE          reduce using rule 24 (statements -> statements statement .)
    LBRACE          reduce using rule 24 (statements -> statements statement .)
    ID              reduce using rule 24 (statements -> statements statement .)
    IF              reduce using rule 24 (statements -> statements statement .)
    WHILE           reduce using rule 24 (statements -> statements statement .)
    DO              reduce using rule 24 (statements -> statements statement .)
    FOR             reduce using rule 24 (statements -> statements statement .)
    BREAK           reduce using rule 24 (statements -> statements statement .)
    CONTINUE        reduce using rule 24 (statements -> statements statement .)
    RETURN          reduce using rule 24 (statements -> statements statement .)
    TYPE            reduce using rule 24 (statements -> statements statement .)
    LPAREN          reduce using rule 24 (statements -> statements statement .)
    NOT             reduce using rule 24 (statements -> statements statement .)
    MINUS           reduce using rule 24 (statements -> statements statement .)
    INV             reduce using rule 24 (statements -> statements statement .)
    BOOLCONST       reduce using rule 24 (statements -> statements statement .)
    CHARCONST       reduce using rule 24 (statements -> statements statement .)
    INTCONST        reduce using rule 24 (statements -> statements statement .)
    FLOATCONST      reduce using rule 24 (statements -> statements statement .)
    HEXCONST        reduce using rule 24 (statements -> statements statement .)
    STRINGCONST     reduce using rule 24 (statements -> statements statement .)


state 59

    (14) fundef -> funheader LBRACE statements RBRACE .

    EXTERN          reduce using rule 14 (fundef -> funheader LBRACE statements RBRACE .)
    STATIC          reduce using rule 14 (fundef -> funheader LBRACE statements RBRACE .)
    TYPE            reduce using rule 14 (fundef -> funheader LBRACE statements RBRACE .)
    $end            reduce using rule 14 (fundef -> funheader LBRACE statements RBRACE .)


state 60

    (28) statement -> type LBRACKET . expr RBRACKET ID SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    index                          shift and go to state 57
    expr                           shift and go to state 104
    funcall                        shift and go to state 24

state 61

    (27) statement -> type ID . ASSIGN expr SEMICOL

    ASSIGN          shift and go to state 105


state 62

    (49) expr -> expr TIMES . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 106

state 63

    (51) expr -> expr MODULO . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 107

state 64

    (56) expr -> expr LE . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 108

state 65

    (55) expr -> expr GT . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 109

state 66

    (54) expr -> expr LT . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 110

state 67

    (52) expr -> expr EQ . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 111

state 68

    (53) expr -> expr NE . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 112

state 69

    (33) statement -> expr SEMICOL .

    RBRACE          reduce using rule 33 (statement -> expr SEMICOL .)
    LBRACE          reduce using rule 33 (statement -> expr SEMICOL .)
    ID              reduce using rule 33 (statement -> expr SEMICOL .)
    IF              reduce using rule 33 (statement -> expr SEMICOL .)
    WHILE           reduce using rule 33 (statement -> expr SEMICOL .)
    DO              reduce using rule 33 (statement -> expr SEMICOL .)
    FOR             reduce using rule 33 (statement -> expr SEMICOL .)
    BREAK           reduce using rule 33 (statement -> expr SEMICOL .)
    CONTINUE        reduce using rule 33 (statement -> expr SEMICOL .)
    RETURN          reduce using rule 33 (statement -> expr SEMICOL .)
    TYPE            reduce using rule 33 (statement -> expr SEMICOL .)
    LPAREN          reduce using rule 33 (statement -> expr SEMICOL .)
    NOT             reduce using rule 33 (statement -> expr SEMICOL .)
    MINUS           reduce using rule 33 (statement -> expr SEMICOL .)
    INV             reduce using rule 33 (statement -> expr SEMICOL .)
    BOOLCONST       reduce using rule 33 (statement -> expr SEMICOL .)
    CHARCONST       reduce using rule 33 (statement -> expr SEMICOL .)
    INTCONST        reduce using rule 33 (statement -> expr SEMICOL .)
    FLOATCONST      reduce using rule 33 (statement -> expr SEMICOL .)
    HEXCONST        reduce using rule 33 (statement -> expr SEMICOL .)
    STRINGCONST     reduce using rule 33 (statement -> expr SEMICOL .)
    ELSE            reduce using rule 33 (statement -> expr SEMICOL .)


state 70

    (44) index -> expr LBRACKET . expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 113

state 71

    (59) expr -> expr OR . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 114

state 72

    (50) expr -> expr DIVIDE . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 115

state 73

    (48) expr -> expr MINUS . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 116

state 74

    (47) expr -> expr PLUS . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 117

state 75

    (57) expr -> expr GE . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 118

state 76

    (58) expr -> expr AND . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 119

state 77

    (41) statement -> RETURN SEMICOL .

    RBRACE          reduce using rule 41 (statement -> RETURN SEMICOL .)
    LBRACE          reduce using rule 41 (statement -> RETURN SEMICOL .)
    ID              reduce using rule 41 (statement -> RETURN SEMICOL .)
    IF              reduce using rule 41 (statement -> RETURN SEMICOL .)
    WHILE           reduce using rule 41 (statement -> RETURN SEMICOL .)
    DO              reduce using rule 41 (statement -> RETURN SEMICOL .)
    FOR             reduce using rule 41 (statement -> RETURN SEMICOL .)
    BREAK           reduce using rule 41 (statement -> RETURN SEMICOL .)
    CONTINUE        reduce using rule 41 (statement -> RETURN SEMICOL .)
    RETURN          reduce using rule 41 (statement -> RETURN SEMICOL .)
    TYPE            reduce using rule 41 (statement -> RETURN SEMICOL .)
    LPAREN          reduce using rule 41 (statement -> RETURN SEMICOL .)
    NOT             reduce using rule 41 (statement -> RETURN SEMICOL .)
    MINUS           reduce using rule 41 (statement -> RETURN SEMICOL .)
    INV             reduce using rule 41 (statement -> RETURN SEMICOL .)
    BOOLCONST       reduce using rule 41 (statement -> RETURN SEMICOL .)
    CHARCONST       reduce using rule 41 (statement -> RETURN SEMICOL .)
    INTCONST        reduce using rule 41 (statement -> RETURN SEMICOL .)
    FLOATCONST      reduce using rule 41 (statement -> RETURN SEMICOL .)
    HEXCONST        reduce using rule 41 (statement -> RETURN SEMICOL .)
    STRINGCONST     reduce using rule 41 (statement -> RETURN SEMICOL .)
    ELSE            reduce using rule 41 (statement -> RETURN SEMICOL .)


state 78

    (42) statement -> RETURN expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 120
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 79

    (26) statement -> LBRACE statements . RBRACE
    (24) statements -> statements . statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RBRACE          shift and go to state 121
    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 58
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 80

    (25) statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 25 (statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 25 (statement -> LBRACE RBRACE .)
    ID              reduce using rule 25 (statement -> LBRACE RBRACE .)
    IF              reduce using rule 25 (statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 25 (statement -> LBRACE RBRACE .)
    DO              reduce using rule 25 (statement -> LBRACE RBRACE .)
    FOR             reduce using rule 25 (statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 25 (statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 25 (statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 25 (statement -> LBRACE RBRACE .)
    TYPE            reduce using rule 25 (statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 25 (statement -> LBRACE RBRACE .)
    NOT             reduce using rule 25 (statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 25 (statement -> LBRACE RBRACE .)
    INV             reduce using rule 25 (statement -> LBRACE RBRACE .)
    BOOLCONST       reduce using rule 25 (statement -> LBRACE RBRACE .)
    CHARCONST       reduce using rule 25 (statement -> LBRACE RBRACE .)
    INTCONST        reduce using rule 25 (statement -> LBRACE RBRACE .)
    FLOATCONST      reduce using rule 25 (statement -> LBRACE RBRACE .)
    HEXCONST        reduce using rule 25 (statement -> LBRACE RBRACE .)
    STRINGCONST     reduce using rule 25 (statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 25 (statement -> LBRACE RBRACE .)


state 81

    (37) statement -> DO statement . WHILE LPAREN expr RPAREN SEMICOL

    WHILE           shift and go to state 122


state 82

    (64) funcall -> ID LPAREN . RPAREN
    (65) funcall -> ID LPAREN . exprs RPAREN
    (66) exprs -> . expr
    (67) exprs -> . exprs COMMA expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RPAREN          shift and go to state 123
    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    exprs                          shift and go to state 124
    expr                           shift and go to state 125

state 83

    (31) statement -> ID MODIFY . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 126

state 84

    (29) statement -> ID ASSIGN . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 127

state 85

    (32) statement -> index MODIFY . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 128

state 86

    (30) statement -> index ASSIGN . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 129

state 87

    (46) expr -> LPAREN expr . RPAREN
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 130
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 88

    (61) expr -> MINUS expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 61 (expr -> MINUS expr .)
    PLUS            reduce using rule 61 (expr -> MINUS expr .)
    MINUS           reduce using rule 61 (expr -> MINUS expr .)
    TIMES           reduce using rule 61 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 61 (expr -> MINUS expr .)
    MODULO          reduce using rule 61 (expr -> MINUS expr .)
    EQ              reduce using rule 61 (expr -> MINUS expr .)
    NE              reduce using rule 61 (expr -> MINUS expr .)
    LT              reduce using rule 61 (expr -> MINUS expr .)
    GT              reduce using rule 61 (expr -> MINUS expr .)
    LE              reduce using rule 61 (expr -> MINUS expr .)
    GE              reduce using rule 61 (expr -> MINUS expr .)
    AND             reduce using rule 61 (expr -> MINUS expr .)
    OR              reduce using rule 61 (expr -> MINUS expr .)
    RPAREN          reduce using rule 61 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 61 (expr -> MINUS expr .)
    COMMA           reduce using rule 61 (expr -> MINUS expr .)
    TO              reduce using rule 61 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 70

  ! LBRACKET        [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MODULO          [ shift and go to state 63 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 89

    (40) statement -> CONTINUE SEMICOL .

    RBRACE          reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    LBRACE          reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    ID              reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    IF              reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    WHILE           reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    DO              reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    FOR             reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    BREAK           reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    CONTINUE        reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    RETURN          reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    TYPE            reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    LPAREN          reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    NOT             reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    MINUS           reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    INV             reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    BOOLCONST       reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    CHARCONST       reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    INTCONST        reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    FLOATCONST      reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    HEXCONST        reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    STRINGCONST     reduce using rule 40 (statement -> CONTINUE SEMICOL .)
    ELSE            reduce using rule 40 (statement -> CONTINUE SEMICOL .)


state 90

    (39) statement -> BREAK SEMICOL .

    RBRACE          reduce using rule 39 (statement -> BREAK SEMICOL .)
    LBRACE          reduce using rule 39 (statement -> BREAK SEMICOL .)
    ID              reduce using rule 39 (statement -> BREAK SEMICOL .)
    IF              reduce using rule 39 (statement -> BREAK SEMICOL .)
    WHILE           reduce using rule 39 (statement -> BREAK SEMICOL .)
    DO              reduce using rule 39 (statement -> BREAK SEMICOL .)
    FOR             reduce using rule 39 (statement -> BREAK SEMICOL .)
    BREAK           reduce using rule 39 (statement -> BREAK SEMICOL .)
    CONTINUE        reduce using rule 39 (statement -> BREAK SEMICOL .)
    RETURN          reduce using rule 39 (statement -> BREAK SEMICOL .)
    TYPE            reduce using rule 39 (statement -> BREAK SEMICOL .)
    LPAREN          reduce using rule 39 (statement -> BREAK SEMICOL .)
    NOT             reduce using rule 39 (statement -> BREAK SEMICOL .)
    MINUS           reduce using rule 39 (statement -> BREAK SEMICOL .)
    INV             reduce using rule 39 (statement -> BREAK SEMICOL .)
    BOOLCONST       reduce using rule 39 (statement -> BREAK SEMICOL .)
    CHARCONST       reduce using rule 39 (statement -> BREAK SEMICOL .)
    INTCONST        reduce using rule 39 (statement -> BREAK SEMICOL .)
    FLOATCONST      reduce using rule 39 (statement -> BREAK SEMICOL .)
    HEXCONST        reduce using rule 39 (statement -> BREAK SEMICOL .)
    STRINGCONST     reduce using rule 39 (statement -> BREAK SEMICOL .)
    ELSE            reduce using rule 39 (statement -> BREAK SEMICOL .)


state 91

    (36) statement -> WHILE LPAREN . expr RPAREN statement
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 131

state 92

    (62) expr -> INV expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 62 (expr -> INV expr .)
    PLUS            reduce using rule 62 (expr -> INV expr .)
    MINUS           reduce using rule 62 (expr -> INV expr .)
    TIMES           reduce using rule 62 (expr -> INV expr .)
    DIVIDE          reduce using rule 62 (expr -> INV expr .)
    MODULO          reduce using rule 62 (expr -> INV expr .)
    EQ              reduce using rule 62 (expr -> INV expr .)
    NE              reduce using rule 62 (expr -> INV expr .)
    LT              reduce using rule 62 (expr -> INV expr .)
    GT              reduce using rule 62 (expr -> INV expr .)
    LE              reduce using rule 62 (expr -> INV expr .)
    GE              reduce using rule 62 (expr -> INV expr .)
    AND             reduce using rule 62 (expr -> INV expr .)
    OR              reduce using rule 62 (expr -> INV expr .)
    RPAREN          reduce using rule 62 (expr -> INV expr .)
    RBRACKET        reduce using rule 62 (expr -> INV expr .)
    COMMA           reduce using rule 62 (expr -> INV expr .)
    TO              reduce using rule 62 (expr -> INV expr .)
    LBRACKET        shift and go to state 70

  ! LBRACKET        [ reduce using rule 62 (expr -> INV expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MODULO          [ shift and go to state 63 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 93

    (34) statement -> IF LPAREN . expr RPAREN statement
    (35) statement -> IF LPAREN . expr RPAREN statement ELSE statement
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 132

state 94

    (38) statement -> FOR LPAREN . type ID ASSIGN expr TO expr RPAREN statement
    (74) type -> . TYPE
    (75) type -> . type BRACKETS

    TYPE            shift and go to state 4

    type                           shift and go to state 133

state 95

    (17) funheader -> type ID LPAREN RPAREN .

    LBRACE          reduce using rule 17 (funheader -> type ID LPAREN RPAREN .)
    SEMICOL         reduce using rule 17 (funheader -> type ID LPAREN RPAREN .)


state 96

    (21) params -> type . ID
    (75) type -> type . BRACKETS

    ID              shift and go to state 134
    BRACKETS        shift and go to state 14


state 97

    (18) funheader -> type ID LPAREN params . RPAREN
    (22) params -> params . COMMA type ID

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 135


state 98

    (10) globaldef -> type ID ASSIGN expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 137
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 99

    (8) globaldec -> EXTERN type ID SEMICOL .

    EXTERN          reduce using rule 8 (globaldec -> EXTERN type ID SEMICOL .)
    STATIC          reduce using rule 8 (globaldec -> EXTERN type ID SEMICOL .)
    TYPE            reduce using rule 8 (globaldec -> EXTERN type ID SEMICOL .)
    $end            reduce using rule 8 (globaldec -> EXTERN type ID SEMICOL .)


state 100

    (17) funheader -> type ID LPAREN . RPAREN
    (18) funheader -> type ID LPAREN . params RPAREN
    (19) funheader_varargs -> type ID LPAREN . DOTS RPAREN
    (20) funheader_varargs -> type ID LPAREN . params COMMA DOTS RPAREN
    (21) params -> . type ID
    (22) params -> . params COMMA type ID
    (74) type -> . TYPE
    (75) type -> . type BRACKETS

    RPAREN          shift and go to state 95
    DOTS            shift and go to state 138
    TYPE            shift and go to state 4

    type                           shift and go to state 96
    params                         shift and go to state 139

state 101

    (16) fundef -> STATIC funheader LBRACE statements . RBRACE
    (24) statements -> statements . statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    RBRACE          shift and go to state 140
    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    statement                      shift and go to state 58
    funcall                        shift and go to state 24
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 102

    (15) fundef -> STATIC funheader LBRACE RBRACE .

    EXTERN          reduce using rule 15 (fundef -> STATIC funheader LBRACE RBRACE .)
    STATIC          reduce using rule 15 (fundef -> STATIC funheader LBRACE RBRACE .)
    TYPE            reduce using rule 15 (fundef -> STATIC funheader LBRACE RBRACE .)
    $end            reduce using rule 15 (fundef -> STATIC funheader LBRACE RBRACE .)


state 103

    (9) globaldef -> STATIC type ID ASSIGN . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    index                          shift and go to state 57
    expr                           shift and go to state 141
    funcall                        shift and go to state 24

state 104

    (28) statement -> type LBRACKET expr . RBRACKET ID SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 142
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 105

    (27) statement -> type ID ASSIGN . expr SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    index                          shift and go to state 57
    expr                           shift and go to state 143
    funcall                        shift and go to state 24

state 106

    (49) expr -> expr TIMES expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 49 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 49 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 49 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 49 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 49 (expr -> expr TIMES expr .)
    MODULO          reduce using rule 49 (expr -> expr TIMES expr .)
    EQ              reduce using rule 49 (expr -> expr TIMES expr .)
    NE              reduce using rule 49 (expr -> expr TIMES expr .)
    LT              reduce using rule 49 (expr -> expr TIMES expr .)
    GT              reduce using rule 49 (expr -> expr TIMES expr .)
    LE              reduce using rule 49 (expr -> expr TIMES expr .)
    GE              reduce using rule 49 (expr -> expr TIMES expr .)
    AND             reduce using rule 49 (expr -> expr TIMES expr .)
    OR              reduce using rule 49 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 49 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 49 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 49 (expr -> expr TIMES expr .)
    TO              reduce using rule 49 (expr -> expr TIMES expr .)
    LBRACKET        shift and go to state 70

  ! LBRACKET        [ reduce using rule 49 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MODULO          [ shift and go to state 63 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 107

    (51) expr -> expr MODULO expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 51 (expr -> expr MODULO expr .)
    PLUS            reduce using rule 51 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 51 (expr -> expr MODULO expr .)
    TIMES           reduce using rule 51 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 51 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 51 (expr -> expr MODULO expr .)
    EQ              reduce using rule 51 (expr -> expr MODULO expr .)
    NE              reduce using rule 51 (expr -> expr MODULO expr .)
    LT              reduce using rule 51 (expr -> expr MODULO expr .)
    GT              reduce using rule 51 (expr -> expr MODULO expr .)
    LE              reduce using rule 51 (expr -> expr MODULO expr .)
    GE              reduce using rule 51 (expr -> expr MODULO expr .)
    AND             reduce using rule 51 (expr -> expr MODULO expr .)
    OR              reduce using rule 51 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 51 (expr -> expr MODULO expr .)
    RBRACKET        reduce using rule 51 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 51 (expr -> expr MODULO expr .)
    TO              reduce using rule 51 (expr -> expr MODULO expr .)
    LBRACKET        shift and go to state 70

  ! LBRACKET        [ reduce using rule 51 (expr -> expr MODULO expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MODULO          [ shift and go to state 63 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 108

    (56) expr -> expr LE expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 56 (expr -> expr LE expr .)
    EQ              reduce using rule 56 (expr -> expr LE expr .)
    NE              reduce using rule 56 (expr -> expr LE expr .)
    LT              reduce using rule 56 (expr -> expr LE expr .)
    GT              reduce using rule 56 (expr -> expr LE expr .)
    LE              reduce using rule 56 (expr -> expr LE expr .)
    GE              reduce using rule 56 (expr -> expr LE expr .)
    AND             reduce using rule 56 (expr -> expr LE expr .)
    OR              reduce using rule 56 (expr -> expr LE expr .)
    RPAREN          reduce using rule 56 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 56 (expr -> expr LE expr .)
    COMMA           reduce using rule 56 (expr -> expr LE expr .)
    TO              reduce using rule 56 (expr -> expr LE expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 56 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 56 (expr -> expr LE expr .) ]
  ! LBRACKET        [ reduce using rule 56 (expr -> expr LE expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 109

    (55) expr -> expr GT expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 55 (expr -> expr GT expr .)
    EQ              reduce using rule 55 (expr -> expr GT expr .)
    NE              reduce using rule 55 (expr -> expr GT expr .)
    LT              reduce using rule 55 (expr -> expr GT expr .)
    GT              reduce using rule 55 (expr -> expr GT expr .)
    LE              reduce using rule 55 (expr -> expr GT expr .)
    GE              reduce using rule 55 (expr -> expr GT expr .)
    AND             reduce using rule 55 (expr -> expr GT expr .)
    OR              reduce using rule 55 (expr -> expr GT expr .)
    RPAREN          reduce using rule 55 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 55 (expr -> expr GT expr .)
    COMMA           reduce using rule 55 (expr -> expr GT expr .)
    TO              reduce using rule 55 (expr -> expr GT expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 55 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 55 (expr -> expr GT expr .) ]
  ! LBRACKET        [ reduce using rule 55 (expr -> expr GT expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 110

    (54) expr -> expr LT expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 54 (expr -> expr LT expr .)
    EQ              reduce using rule 54 (expr -> expr LT expr .)
    NE              reduce using rule 54 (expr -> expr LT expr .)
    LT              reduce using rule 54 (expr -> expr LT expr .)
    GT              reduce using rule 54 (expr -> expr LT expr .)
    LE              reduce using rule 54 (expr -> expr LT expr .)
    GE              reduce using rule 54 (expr -> expr LT expr .)
    AND             reduce using rule 54 (expr -> expr LT expr .)
    OR              reduce using rule 54 (expr -> expr LT expr .)
    RPAREN          reduce using rule 54 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 54 (expr -> expr LT expr .)
    COMMA           reduce using rule 54 (expr -> expr LT expr .)
    TO              reduce using rule 54 (expr -> expr LT expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 54 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 54 (expr -> expr LT expr .) ]
  ! LBRACKET        [ reduce using rule 54 (expr -> expr LT expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 111

    (52) expr -> expr EQ expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 52 (expr -> expr EQ expr .)
    EQ              reduce using rule 52 (expr -> expr EQ expr .)
    NE              reduce using rule 52 (expr -> expr EQ expr .)
    AND             reduce using rule 52 (expr -> expr EQ expr .)
    OR              reduce using rule 52 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 52 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 52 (expr -> expr EQ expr .)
    COMMA           reduce using rule 52 (expr -> expr EQ expr .)
    TO              reduce using rule 52 (expr -> expr EQ expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! LBRACKET        [ reduce using rule 52 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 112

    (53) expr -> expr NE expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 53 (expr -> expr NE expr .)
    EQ              reduce using rule 53 (expr -> expr NE expr .)
    NE              reduce using rule 53 (expr -> expr NE expr .)
    AND             reduce using rule 53 (expr -> expr NE expr .)
    OR              reduce using rule 53 (expr -> expr NE expr .)
    RPAREN          reduce using rule 53 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 53 (expr -> expr NE expr .)
    COMMA           reduce using rule 53 (expr -> expr NE expr .)
    TO              reduce using rule 53 (expr -> expr NE expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! LBRACKET        [ reduce using rule 53 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 113

    (44) index -> expr LBRACKET expr . RBRACKET
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 144
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 114

    (59) expr -> expr OR expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 59 (expr -> expr OR expr .)
    OR              reduce using rule 59 (expr -> expr OR expr .)
    RPAREN          reduce using rule 59 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 59 (expr -> expr OR expr .)
    COMMA           reduce using rule 59 (expr -> expr OR expr .)
    TO              reduce using rule 59 (expr -> expr OR expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! MODULO          [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! LBRACKET        [ reduce using rule 59 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 71 ]


state 115

    (50) expr -> expr DIVIDE expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 50 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 50 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 50 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 50 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 50 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 50 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 50 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 50 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 50 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 50 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 50 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 50 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 50 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 50 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 50 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 50 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 50 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 50 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 70

  ! LBRACKET        [ reduce using rule 50 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MODULO          [ shift and go to state 63 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 116

    (48) expr -> expr MINUS expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 48 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 48 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 48 (expr -> expr MINUS expr .)
    EQ              reduce using rule 48 (expr -> expr MINUS expr .)
    NE              reduce using rule 48 (expr -> expr MINUS expr .)
    LT              reduce using rule 48 (expr -> expr MINUS expr .)
    GT              reduce using rule 48 (expr -> expr MINUS expr .)
    LE              reduce using rule 48 (expr -> expr MINUS expr .)
    GE              reduce using rule 48 (expr -> expr MINUS expr .)
    AND             reduce using rule 48 (expr -> expr MINUS expr .)
    OR              reduce using rule 48 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 48 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 48 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 48 (expr -> expr MINUS expr .)
    TO              reduce using rule 48 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LBRACKET        shift and go to state 70

  ! TIMES           [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! LBRACKET        [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 117

    (47) expr -> expr PLUS expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 47 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 47 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 47 (expr -> expr PLUS expr .)
    EQ              reduce using rule 47 (expr -> expr PLUS expr .)
    NE              reduce using rule 47 (expr -> expr PLUS expr .)
    LT              reduce using rule 47 (expr -> expr PLUS expr .)
    GT              reduce using rule 47 (expr -> expr PLUS expr .)
    LE              reduce using rule 47 (expr -> expr PLUS expr .)
    GE              reduce using rule 47 (expr -> expr PLUS expr .)
    AND             reduce using rule 47 (expr -> expr PLUS expr .)
    OR              reduce using rule 47 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 47 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 47 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 47 (expr -> expr PLUS expr .)
    TO              reduce using rule 47 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LBRACKET        shift and go to state 70

  ! TIMES           [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! LBRACKET        [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 118

    (57) expr -> expr GE expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 57 (expr -> expr GE expr .)
    EQ              reduce using rule 57 (expr -> expr GE expr .)
    NE              reduce using rule 57 (expr -> expr GE expr .)
    LT              reduce using rule 57 (expr -> expr GE expr .)
    GT              reduce using rule 57 (expr -> expr GE expr .)
    LE              reduce using rule 57 (expr -> expr GE expr .)
    GE              reduce using rule 57 (expr -> expr GE expr .)
    AND             reduce using rule 57 (expr -> expr GE expr .)
    OR              reduce using rule 57 (expr -> expr GE expr .)
    RPAREN          reduce using rule 57 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 57 (expr -> expr GE expr .)
    COMMA           reduce using rule 57 (expr -> expr GE expr .)
    TO              reduce using rule 57 (expr -> expr GE expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 57 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 57 (expr -> expr GE expr .) ]
  ! LBRACKET        [ reduce using rule 57 (expr -> expr GE expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 66 ]
  ! GT              [ shift and go to state 65 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 119

    (58) expr -> expr AND expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         reduce using rule 58 (expr -> expr AND expr .)
    AND             reduce using rule 58 (expr -> expr AND expr .)
    OR              reduce using rule 58 (expr -> expr AND expr .)
    RPAREN          reduce using rule 58 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 58 (expr -> expr AND expr .)
    COMMA           reduce using rule 58 (expr -> expr AND expr .)
    TO              reduce using rule 58 (expr -> expr AND expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    LBRACKET        shift and go to state 70

  ! PLUS            [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! MODULO          [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LBRACKET        [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 71 ]


state 120

    (42) statement -> RETURN expr SEMICOL .

    RBRACE          reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    LBRACE          reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    ID              reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    IF              reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    WHILE           reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    DO              reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    FOR             reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    BREAK           reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    CONTINUE        reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    RETURN          reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    TYPE            reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    LPAREN          reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    NOT             reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    MINUS           reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    INV             reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    BOOLCONST       reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    CHARCONST       reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    INTCONST        reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    FLOATCONST      reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    HEXCONST        reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    STRINGCONST     reduce using rule 42 (statement -> RETURN expr SEMICOL .)
    ELSE            reduce using rule 42 (statement -> RETURN expr SEMICOL .)


state 121

    (26) statement -> LBRACE statements RBRACE .

    RBRACE          reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    LBRACE          reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    ID              reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    IF              reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    DO              reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    FOR             reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    BREAK           reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    TYPE            reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    LPAREN          reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    NOT             reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    INV             reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    BOOLCONST       reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    CHARCONST       reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    INTCONST        reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    FLOATCONST      reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    HEXCONST        reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    STRINGCONST     reduce using rule 26 (statement -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 26 (statement -> LBRACE statements RBRACE .)


state 122

    (37) statement -> DO statement WHILE . LPAREN expr RPAREN SEMICOL

    LPAREN          shift and go to state 145


state 123

    (64) funcall -> ID LPAREN RPAREN .

    PLUS            reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    EQ              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    NE              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    LT              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    GT              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    LE              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    GE              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    AND             reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    OR              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    SEMICOL         reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 64 (funcall -> ID LPAREN RPAREN .)
    TO              reduce using rule 64 (funcall -> ID LPAREN RPAREN .)


state 124

    (65) funcall -> ID LPAREN exprs . RPAREN
    (67) exprs -> exprs . COMMA expr

    RPAREN          shift and go to state 146
    COMMA           shift and go to state 147


state 125

    (66) exprs -> expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 66 (exprs -> expr .)
    COMMA           reduce using rule 66 (exprs -> expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 126

    (31) statement -> ID MODIFY expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 148
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 127

    (29) statement -> ID ASSIGN expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 149
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 128

    (32) statement -> index MODIFY expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 150
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 129

    (30) statement -> index ASSIGN expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 151
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 130

    (46) expr -> LPAREN expr RPAREN .

    SEMICOL         reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 46 (expr -> LPAREN expr RPAREN .)
    TO              reduce using rule 46 (expr -> LPAREN expr RPAREN .)


state 131

    (36) statement -> WHILE LPAREN expr . RPAREN statement
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 152
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 132

    (34) statement -> IF LPAREN expr . RPAREN statement
    (35) statement -> IF LPAREN expr . RPAREN statement ELSE statement
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 153
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 133

    (38) statement -> FOR LPAREN type . ID ASSIGN expr TO expr RPAREN statement
    (75) type -> type . BRACKETS

    ID              shift and go to state 154
    BRACKETS        shift and go to state 14


state 134

    (21) params -> type ID .

    RPAREN          reduce using rule 21 (params -> type ID .)
    COMMA           reduce using rule 21 (params -> type ID .)


state 135

    (22) params -> params COMMA . type ID
    (74) type -> . TYPE
    (75) type -> . type BRACKETS

    TYPE            shift and go to state 4

    type                           shift and go to state 155

state 136

    (18) funheader -> type ID LPAREN params RPAREN .

    LBRACE          reduce using rule 18 (funheader -> type ID LPAREN params RPAREN .)
    SEMICOL         reduce using rule 18 (funheader -> type ID LPAREN params RPAREN .)


state 137

    (10) globaldef -> type ID ASSIGN expr SEMICOL .

    EXTERN          reduce using rule 10 (globaldef -> type ID ASSIGN expr SEMICOL .)
    STATIC          reduce using rule 10 (globaldef -> type ID ASSIGN expr SEMICOL .)
    TYPE            reduce using rule 10 (globaldef -> type ID ASSIGN expr SEMICOL .)
    $end            reduce using rule 10 (globaldef -> type ID ASSIGN expr SEMICOL .)


state 138

    (19) funheader_varargs -> type ID LPAREN DOTS . RPAREN

    RPAREN          shift and go to state 156


state 139

    (18) funheader -> type ID LPAREN params . RPAREN
    (20) funheader_varargs -> type ID LPAREN params . COMMA DOTS RPAREN
    (22) params -> params . COMMA type ID

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 157


state 140

    (16) fundef -> STATIC funheader LBRACE statements RBRACE .

    EXTERN          reduce using rule 16 (fundef -> STATIC funheader LBRACE statements RBRACE .)
    STATIC          reduce using rule 16 (fundef -> STATIC funheader LBRACE statements RBRACE .)
    TYPE            reduce using rule 16 (fundef -> STATIC funheader LBRACE statements RBRACE .)
    $end            reduce using rule 16 (fundef -> STATIC funheader LBRACE statements RBRACE .)


state 141

    (9) globaldef -> STATIC type ID ASSIGN expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 158
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 142

    (28) statement -> type LBRACKET expr RBRACKET . ID SEMICOL

    ID              shift and go to state 159


state 143

    (27) statement -> type ID ASSIGN expr . SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    SEMICOL         shift and go to state 160
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 144

    (44) index -> expr LBRACKET expr RBRACKET .

    PLUS            reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    EQ              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    NE              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    LE              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    GE              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    SEMICOL         reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    TO              reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)
    MODIFY          reduce using rule 44 (index -> expr LBRACKET expr RBRACKET .)


state 145

    (37) statement -> DO statement WHILE LPAREN . expr RPAREN SEMICOL
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 161

state 146

    (65) funcall -> ID LPAREN exprs RPAREN .

    PLUS            reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    MINUS           reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    TIMES           reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    DIVIDE          reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    MODULO          reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    EQ              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    NE              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    LT              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    GT              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    LE              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    GE              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    AND             reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    OR              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    LBRACKET        reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    SEMICOL         reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    RPAREN          reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    RBRACKET        reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    COMMA           reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)
    TO              reduce using rule 65 (funcall -> ID LPAREN exprs RPAREN .)


state 147

    (67) exprs -> exprs COMMA . expr
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 162

state 148

    (31) statement -> ID MODIFY expr SEMICOL .

    RBRACE          reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    LBRACE          reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    ID              reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    IF              reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    WHILE           reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    DO              reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    FOR             reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    BREAK           reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    CONTINUE        reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    RETURN          reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    TYPE            reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    LPAREN          reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    NOT             reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    MINUS           reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    INV             reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    BOOLCONST       reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    CHARCONST       reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    INTCONST        reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    FLOATCONST      reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    HEXCONST        reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    STRINGCONST     reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)
    ELSE            reduce using rule 31 (statement -> ID MODIFY expr SEMICOL .)


state 149

    (29) statement -> ID ASSIGN expr SEMICOL .

    RBRACE          reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    LBRACE          reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    ID              reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    IF              reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    WHILE           reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    DO              reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    FOR             reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    BREAK           reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    CONTINUE        reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    RETURN          reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    TYPE            reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    LPAREN          reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    NOT             reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    MINUS           reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    INV             reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    BOOLCONST       reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    CHARCONST       reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    INTCONST        reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    FLOATCONST      reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    HEXCONST        reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    STRINGCONST     reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)
    ELSE            reduce using rule 29 (statement -> ID ASSIGN expr SEMICOL .)


state 150

    (32) statement -> index MODIFY expr SEMICOL .

    RBRACE          reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    LBRACE          reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    ID              reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    IF              reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    WHILE           reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    DO              reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    FOR             reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    BREAK           reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    CONTINUE        reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    RETURN          reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    TYPE            reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    LPAREN          reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    NOT             reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    MINUS           reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    INV             reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    BOOLCONST       reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    CHARCONST       reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    INTCONST        reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    FLOATCONST      reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    HEXCONST        reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    STRINGCONST     reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)
    ELSE            reduce using rule 32 (statement -> index MODIFY expr SEMICOL .)


state 151

    (30) statement -> index ASSIGN expr SEMICOL .

    RBRACE          reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    LBRACE          reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    ID              reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    IF              reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    WHILE           reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    DO              reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    FOR             reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    BREAK           reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    CONTINUE        reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    RETURN          reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    TYPE            reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    LPAREN          reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    NOT             reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    MINUS           reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    INV             reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    BOOLCONST       reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    CHARCONST       reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    INTCONST        reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    FLOATCONST      reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    HEXCONST        reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    STRINGCONST     reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)
    ELSE            reduce using rule 30 (statement -> index ASSIGN expr SEMICOL .)


state 152

    (36) statement -> WHILE LPAREN expr RPAREN . statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 163
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 153

    (34) statement -> IF LPAREN expr RPAREN . statement
    (35) statement -> IF LPAREN expr RPAREN . statement ELSE statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 164
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 154

    (38) statement -> FOR LPAREN type ID . ASSIGN expr TO expr RPAREN statement

    ASSIGN          shift and go to state 165


state 155

    (22) params -> params COMMA type . ID
    (75) type -> type . BRACKETS

    ID              shift and go to state 166
    BRACKETS        shift and go to state 14


state 156

    (19) funheader_varargs -> type ID LPAREN DOTS RPAREN .

    SEMICOL         reduce using rule 19 (funheader_varargs -> type ID LPAREN DOTS RPAREN .)


state 157

    (20) funheader_varargs -> type ID LPAREN params COMMA . DOTS RPAREN
    (22) params -> params COMMA . type ID
    (74) type -> . TYPE
    (75) type -> . type BRACKETS

    DOTS            shift and go to state 167
    TYPE            shift and go to state 4

    type                           shift and go to state 155

state 158

    (9) globaldef -> STATIC type ID ASSIGN expr SEMICOL .

    EXTERN          reduce using rule 9 (globaldef -> STATIC type ID ASSIGN expr SEMICOL .)
    STATIC          reduce using rule 9 (globaldef -> STATIC type ID ASSIGN expr SEMICOL .)
    TYPE            reduce using rule 9 (globaldef -> STATIC type ID ASSIGN expr SEMICOL .)
    $end            reduce using rule 9 (globaldef -> STATIC type ID ASSIGN expr SEMICOL .)


state 159

    (28) statement -> type LBRACKET expr RBRACKET ID . SEMICOL

    SEMICOL         shift and go to state 168


state 160

    (27) statement -> type ID ASSIGN expr SEMICOL .

    RBRACE          reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    LBRACE          reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    ID              reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    IF              reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    WHILE           reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    DO              reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    FOR             reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    BREAK           reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    CONTINUE        reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    RETURN          reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    TYPE            reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    LPAREN          reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    NOT             reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    MINUS           reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    INV             reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    BOOLCONST       reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    CHARCONST       reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    INTCONST        reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    FLOATCONST      reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    HEXCONST        reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    STRINGCONST     reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)
    ELSE            reduce using rule 27 (statement -> type ID ASSIGN expr SEMICOL .)


state 161

    (37) statement -> DO statement WHILE LPAREN expr . RPAREN SEMICOL
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 169
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 162

    (67) exprs -> exprs COMMA expr .
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 67 (exprs -> exprs COMMA expr .)
    COMMA           reduce using rule 67 (exprs -> exprs COMMA expr .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 163

    (36) statement -> WHILE LPAREN expr RPAREN statement .

    RBRACE          reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    LBRACE          reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    ID              reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    IF              reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    WHILE           reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    DO              reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    FOR             reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    BREAK           reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    CONTINUE        reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    RETURN          reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    TYPE            reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    LPAREN          reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    NOT             reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    MINUS           reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    INV             reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    BOOLCONST       reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    CHARCONST       reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    INTCONST        reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    FLOATCONST      reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    HEXCONST        reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    STRINGCONST     reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)
    ELSE            reduce using rule 36 (statement -> WHILE LPAREN expr RPAREN statement .)


state 164

    (34) statement -> IF LPAREN expr RPAREN statement .
    (35) statement -> IF LPAREN expr RPAREN statement . ELSE statement

    RBRACE          reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    LBRACE          reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    ID              reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    IF              reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    WHILE           reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    DO              reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    FOR             reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    BREAK           reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    CONTINUE        reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    RETURN          reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    TYPE            reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    LPAREN          reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    NOT             reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    MINUS           reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    INV             reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    BOOLCONST       reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    CHARCONST       reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    INTCONST        reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    FLOATCONST      reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    HEXCONST        reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    STRINGCONST     reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .)
    ELSE            shift and go to state 170

  ! ELSE            [ reduce using rule 34 (statement -> IF LPAREN expr RPAREN statement .) ]


state 165

    (38) statement -> FOR LPAREN type ID ASSIGN . expr TO expr RPAREN statement
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 171

state 166

    (22) params -> params COMMA type ID .

    RPAREN          reduce using rule 22 (params -> params COMMA type ID .)
    COMMA           reduce using rule 22 (params -> params COMMA type ID .)


state 167

    (20) funheader_varargs -> type ID LPAREN params COMMA DOTS . RPAREN

    RPAREN          shift and go to state 172


state 168

    (28) statement -> type LBRACKET expr RBRACKET ID SEMICOL .

    RBRACE          reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    LBRACE          reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    ID              reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    IF              reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    WHILE           reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    DO              reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    FOR             reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    BREAK           reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    CONTINUE        reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    RETURN          reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    TYPE            reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    LPAREN          reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    NOT             reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    MINUS           reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    INV             reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    BOOLCONST       reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    CHARCONST       reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    INTCONST        reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    FLOATCONST      reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    HEXCONST        reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    STRINGCONST     reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)
    ELSE            reduce using rule 28 (statement -> type LBRACKET expr RBRACKET ID SEMICOL .)


state 169

    (37) statement -> DO statement WHILE LPAREN expr RPAREN . SEMICOL

    SEMICOL         shift and go to state 173


state 170

    (35) statement -> IF LPAREN expr RPAREN statement ELSE . statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 174
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 171

    (38) statement -> FOR LPAREN type ID ASSIGN expr . TO expr RPAREN statement
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    TO              shift and go to state 175
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 172

    (20) funheader_varargs -> type ID LPAREN params COMMA DOTS RPAREN .

    SEMICOL         reduce using rule 20 (funheader_varargs -> type ID LPAREN params COMMA DOTS RPAREN .)


state 173

    (37) statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .

    RBRACE          reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    LBRACE          reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    ID              reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    IF              reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    WHILE           reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    DO              reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    FOR             reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    BREAK           reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    CONTINUE        reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    RETURN          reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    TYPE            reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    LPAREN          reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    NOT             reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    MINUS           reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    INV             reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    BOOLCONST       reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    CHARCONST       reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    INTCONST        reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    FLOATCONST      reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    HEXCONST        reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    STRINGCONST     reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)
    ELSE            reduce using rule 37 (statement -> DO statement WHILE LPAREN expr RPAREN SEMICOL .)


state 174

    (35) statement -> IF LPAREN expr RPAREN statement ELSE statement .

    RBRACE          reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    ID              reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    IF              reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    WHILE           reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    DO              reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    FOR             reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    BREAK           reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    RETURN          reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    TYPE            reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    NOT             reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    MINUS           reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    INV             reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    BOOLCONST       reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    CHARCONST       reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    INTCONST        reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    FLOATCONST      reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    HEXCONST        reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    STRINGCONST     reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)
    ELSE            reduce using rule 35 (statement -> IF LPAREN expr RPAREN statement ELSE statement .)


state 175

    (38) statement -> FOR LPAREN type ID ASSIGN expr TO . expr RPAREN statement
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (44) index -> . expr LBRACKET expr RBRACKET
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    ID              shift and go to state 56
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    index                          shift and go to state 57
    expr                           shift and go to state 176

state 176

    (38) statement -> FOR LPAREN type ID ASSIGN expr TO expr . RPAREN statement
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . EQ expr
    (53) expr -> expr . NE expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . GT expr
    (56) expr -> expr . LE expr
    (57) expr -> expr . GE expr
    (58) expr -> expr . AND expr
    (59) expr -> expr . OR expr
    (44) index -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 177
    PLUS            shift and go to state 74
    MINUS           shift and go to state 73
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 63
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LT              shift and go to state 66
    GT              shift and go to state 65
    LE              shift and go to state 64
    GE              shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 71
    LBRACKET        shift and go to state 70


state 177

    (38) statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN . statement
    (25) statement -> . LBRACE RBRACE
    (26) statement -> . LBRACE statements RBRACE
    (27) statement -> . type ID ASSIGN expr SEMICOL
    (28) statement -> . type LBRACKET expr RBRACKET ID SEMICOL
    (29) statement -> . ID ASSIGN expr SEMICOL
    (30) statement -> . index ASSIGN expr SEMICOL
    (31) statement -> . ID MODIFY expr SEMICOL
    (32) statement -> . index MODIFY expr SEMICOL
    (33) statement -> . expr SEMICOL
    (34) statement -> . IF LPAREN expr RPAREN statement
    (35) statement -> . IF LPAREN expr RPAREN statement ELSE statement
    (36) statement -> . WHILE LPAREN expr RPAREN statement
    (37) statement -> . DO statement WHILE LPAREN expr RPAREN SEMICOL
    (38) statement -> . FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement
    (39) statement -> . BREAK SEMICOL
    (40) statement -> . CONTINUE SEMICOL
    (41) statement -> . RETURN SEMICOL
    (42) statement -> . RETURN expr SEMICOL
    (74) type -> . TYPE
    (75) type -> . type BRACKETS
    (44) index -> . expr LBRACKET expr RBRACKET
    (43) expr -> . ID
    (45) expr -> . index
    (46) expr -> . LPAREN expr RPAREN
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr EQ expr
    (53) expr -> . expr NE expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr GT expr
    (56) expr -> . expr LE expr
    (57) expr -> . expr GE expr
    (58) expr -> . expr AND expr
    (59) expr -> . expr OR expr
    (60) expr -> . NOT expr
    (61) expr -> . MINUS expr
    (62) expr -> . INV expr
    (63) expr -> . funcall
    (68) expr -> . BOOLCONST
    (69) expr -> . CHARCONST
    (70) expr -> . INTCONST
    (71) expr -> . FLOATCONST
    (72) expr -> . HEXCONST
    (73) expr -> . STRINGCONST
    (64) funcall -> . ID LPAREN RPAREN
    (65) funcall -> . ID LPAREN exprs RPAREN

    LBRACE          shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 46
    WHILE           shift and go to state 42
    DO              shift and go to state 32
    FOR             shift and go to state 47
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 30
    TYPE            shift and go to state 4
    LPAREN          shift and go to state 36
    NOT             shift and go to state 23
    MINUS           shift and go to state 37
    INV             shift and go to state 43
    BOOLCONST       shift and go to state 22
    CHARCONST       shift and go to state 38
    INTCONST        shift and go to state 28
    FLOATCONST      shift and go to state 35
    HEXCONST        shift and go to state 40
    STRINGCONST     shift and go to state 45

    funcall                        shift and go to state 24
    statement                      shift and go to state 178
    type                           shift and go to state 27
    index                          shift and go to state 34
    expr                           shift and go to state 29

state 178

    (38) statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .

    RBRACE          reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    LBRACE          reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    ID              reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    IF              reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    WHILE           reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    DO              reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    FOR             reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    BREAK           reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    CONTINUE        reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    RETURN          reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    TYPE            reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    LPAREN          reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    NOT             reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    MINUS           reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    INV             reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    BOOLCONST       reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    CHARCONST       reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    INTCONST        reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    FLOATCONST      reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    HEXCONST        reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    STRINGCONST     reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)
    ELSE            reduce using rule 38 (statement -> FOR LPAREN type ID ASSIGN expr TO expr RPAREN statement .)

